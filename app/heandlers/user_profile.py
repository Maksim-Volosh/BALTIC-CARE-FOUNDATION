from datetime import datetime, timedelta

from aiogram import Bot, F, Router
from aiogram.types import CallbackQuery, Message

import app.keyboards.main_keyboards as mainkb
import app.keyboards.profile_keyboards as prkb
import config
from app.database import Database
from app.utils.utils import check_registered

bot = Bot(token=config.TOKEN)  
router = Router()


async def user_profile(message: Message):
    """
    Show user profile.
    """
    if await check_registered(message):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!!! \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=prkb.user_profile)
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"', 
                             reply_markup=mainkb.start)
    
@router.callback_query(F.data == 'user_stats')
async def user_stats(callback: CallbackQuery):
    db = Database(config.DB_NAME)
    username = callback.from_user.username
    if username:
        stats = db.get_work_records(username)
            
        if stats:
            total_collection = sum([int(record[5]) for record in stats])
            total_earnings = sum([float(record[6]) for record in stats])
            
            total_time_worked = timedelta()
            for record in stats:
                time_str = record[4]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM:SS'
                hours, minutes, seconds = map(int, time_str.split(':'))
                total_time_worked += timedelta(hours=hours, minutes=minutes, seconds=seconds)
            total_hours = round(total_time_worked.total_seconds() // 3600)
            total_minutes = round((total_time_worked.total_seconds() % 3600) // 60)
            
            best_day = db.best_day_collection(username)
            best_day_date = datetime.strptime(best_day[2], '%Y-%m-%d %H:%M').date()
            best_day_from = datetime.strptime(best_day[2], '%Y-%m-%d %H:%M').strftime('%H:%M')
            best_day_to = datetime.strptime(best_day[3], '%Y-%m-%d %H:%M').strftime('%H:%M')
            best_day_total_time = datetime.strptime(best_day[4], '%H:%M:%S').time()
            best_day_hours, best_day_minutes = best_day_total_time.hour, best_day_total_time.minute
            
            if len(stats) >= 3:
                worse_day = db.worse_day_collection(username)
                worse_day_date = datetime.strptime(worse_day[2], '%Y-%m-%d %H:%M').date()
                worse_day_from = datetime.strptime(worse_day[2], '%Y-%m-%d %H:%M').strftime('%H:%M')
                worse_day_to = datetime.strptime(worse_day[3], '%Y-%m-%d %H:%M').strftime('%H:%M')
                worse_day_total_time = datetime.strptime(worse_day[4], '%H:%M:%S').time()
                worse_day_hours, worse_day_minutes = worse_day_total_time.hour, worse_day_total_time.minute
            
            max_earnings = max([float(record[6]) for record in stats])
            max_collection = max([int(record[5]) for record in stats])
            user = db.get_user(username)
            
            message_text = (
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n\n'
                f'–ü–æ–ª–Ω–æ–µ –∏–º—è: {user[1]} \n'
                f'–ù–æ–º–µ—Ä: {user[2]} \n'
                f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user[3]}\n\n'
                f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n'
                f'–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {len(stats)} \n'
                f'–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_collection}‚Ç¨ \n'
                f'–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earnings}‚Ç¨ \n'
                f'–í—Å–µ–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours}—á {total_minutes}–º \n\n'
                f'–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞ –¥–µ–Ω—å: {max_collection}‚Ç¨ \n'
                f'–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –¥–µ–Ω—å: {max_earnings}‚Ç¨ \n\n'
                f'üéâ –õ—É—á—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {best_day_date} \n\n'
                f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day_from} - {best_day_to} \n'
                f'–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day_hours}—á {best_day_minutes}–º \n'
                f'–û–±—â–∏–π —Å–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day[5]}‚Ç¨\n'
                f'–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day[6]}‚Ç¨\n\n'
            )

            if len(stats) >= 3:
                message_text += (
                    f'üò≠ –•—É–¥—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {worse_day_date} \n\n'
                    f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day_from} - {worse_day_to} \n'
                    f'–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day_hours}—á {worse_day_minutes}–º \n'
                    f'–û–±—â–∏–π —Å–±–æ—Ä —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day[5]}‚Ç¨\n'
                    f'–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day[6]}‚Ç¨'
                )
            await callback.message.edit_text(message_text, reply_markup=prkb.pback)
        else:
            await callback.message.edit_text(f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
                                             f'–í—ã –Ω–µ —Ä–∞–∑—É –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É!', reply_markup=prkb.pback)