import calendar
from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.heandlers.heandlers import is_admin
from app.states import ChoiceUser
from aiogram import Bot
from app.database import Database
import app.keyboards.main_keyboards as mainkb
import app.keyboards.profile_keyboards as prkb
from app.utils.utils import paginate_users
import config 
import re

bot = Bot(token=config.TOKEN)  
router = Router()

@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    """
    Show user profile.
    """
    if await is_admin(message):
        await admin_profile(message)
    else:
        await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞', reply_markup=mainkb.main)

async def admin_profile(message: Message):
    """
    Show admin profile.
    """
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞!!! \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=prkb.admin_profile)

"""========= USERS ========="""

@router.callback_query(F.data == 'all_users')
async def all_users(callback: CallbackQuery, state: FSMContext):
    """
    Show all users in admin profile.
    """
    await state.set_state(ChoiceUser.username)
    await state.update_data(page=1)
    await show_users(callback, state)

@router.callback_query(F.data.startswith('page_'))
async def show_users(callback: CallbackQuery, state: FSMContext):
    """
    Show all users in admin profile.
    """
    data = await state.get_data()
    page = int(callback.data.split('_')[1]) if 'page_' in callback.data else data.get('page', 1)
    await state.update_data(page=page)
    
    db = Database(config.DB_NAME)
    users = db.all_users()
    paginated_users = paginate_users(users, page)
    
    if paginated_users:
        if page <= 1: page_text = ''
        else: page_text = f' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page})'
        users_text = '\n'.join([f'{i[0]}. {i[1]} - @{i[4]}' for i in paginated_users])
        await callback.message.edit_text(f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏{page_text}:\n\n{users_text}\n\n–ù–∞–ø–∏—à–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º', reply_markup=prkb.get_pagination_markup(page, len(users)))
    else:
        await callback.message.edit_text('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.', reply_markup=prkb.get_pagination_markup(page, len(users)))
    
@router.message(ChoiceUser.username)
async def choice_user_state(message: Message, state: FSMContext):
    """
    Show information about chosen user.
    """
    db = Database(config.DB_NAME)
    username = message.text[1:] if message.text.startswith('@') else message.text
    user = db.get_user(username)
    if user:
        await state.update_data(username=username)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n\n'
                             f'–ò–º—è: {user[1]} \n\n'
                             f'–ù–æ–º–µ—Ä: {user[2]} \n\n'
                             f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user[3]}', reply_markup=prkb.admin_users_user)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç', reply_markup=prkb.admin_profile_users)
    
@router.callback_query(F.data == 'get_user_stats')
async def get_user_stats(callback: CallbackQuery, state: FSMContext):
    """
    Get user stats.
    """
    data = await state.get_data()
    username = data.get('username')
    db = Database(config.DB_NAME)
    user = db.get_user(username)
    if user:
        stats = db.get_work_records(username)
        total_collection = sum([int(record[5]) for record in stats])
        total_earnings = sum([int(record[6]) for record in stats])
        
        total_time_worked = timedelta()
        for record in stats:
            time_str = record[4]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM:SS'
            hours, minutes, seconds = map(int, time_str.split(':'))
            total_time_worked += timedelta(hours=hours, minutes=minutes, seconds=seconds)
        total_hours = round(total_time_worked.total_seconds() // 3600)
        total_minutes = round((total_time_worked.total_seconds() % 3600) // 60)
            
        if stats:
            best_day = db.best_day_collection(username)
            best_day_date = datetime.strptime(best_day[2], '%Y-%m-%d %H:%M').date()
            best_day_from = datetime.strptime(best_day[2], '%Y-%m-%d %H:%M').strftime('%H:%M')
            best_day_to = datetime.strptime(best_day[3], '%Y-%m-%d %H:%M').strftime('%H:%M')
            best_day_total_time = datetime.strptime(best_day[4], '%H:%M:%S').time()
            best_day_hours, best_day_minutes = best_day_total_time.hour, best_day_total_time.minute
            
            worse_day = db.worse_day_collection(username)
            worse_day_date = datetime.strptime(worse_day[2], '%Y-%m-%d %H:%M').date()
            worse_day_from = datetime.strptime(worse_day[2], '%Y-%m-%d %H:%M').strftime('%H:%M')
            worse_day_to = datetime.strptime(worse_day[3], '%Y-%m-%d %H:%M').strftime('%H:%M')
            worse_day_total_time = datetime.strptime(worse_day[4], '%H:%M:%S').time()
            worse_day_hours, worse_day_minutes = worse_day_total_time.hour, worse_day_total_time.minute
            
            max_earnings = max([int(record[6]) for record in stats])
            max_collection = max([int(record[5]) for record in stats])
            await callback.message.edit_text(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n\n'
                                             f'–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {len(stats)} \n'
                                             f'–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_collection}‚Ç¨ \n'
                                             f'–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earnings}‚Ç¨ \n'
                                             f'–í—Å–µ–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours}—á {total_minutes}–º \n\n'
                                             f'–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞ –¥–µ–Ω—å: {max_collection}‚Ç¨ \n'
                                             f'–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –¥–µ–Ω—å: {max_earnings}‚Ç¨ \n\n'
                                             f'üéâ –õ—É—á—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {best_day_date} \n\n'
                                             f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day_from} - {best_day_to} \n'
                                             f'–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day_hours}—á {best_day_minutes}–º \n'
                                             f'–û–±—â–∏–π —Å–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day[5]}‚Ç¨\n'
                                             f'–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ª—É—á—à–µ–≥–æ –¥–Ω—è: {best_day[6]}‚Ç¨\n\n'
                                             f'üò≠ –•—É–¥—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {worse_day_date} \n\n'
                                             f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day_from} - {worse_day_to} \n'
                                             f'–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day_hours}—á {worse_day_minutes}–º \n'
                                             f'–û–±—â–∏–π —Å–±–æ—Ä —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day[5]}‚Ç¨\n'
                                             f'–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ö—É–¥—à–µ–≥–æ –¥–Ω—è: {worse_day[6]}‚Ç¨',
                                             reply_markup=prkb.admin_users_user_stats)
        else:
            await callback.message.edit_text(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n\n'
                                             f'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ', reply_markup=prkb.admin_users_user_stats)
    else:
        await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω!!', reply_markup=prkb.admin_profile_users)

@router.callback_query(F.data == 'delete_user')
async def delete_user(callback: CallbackQuery, state: FSMContext):
    """
    Delete user.
    """
    data = await state.get_data()
    username = data.get('username')
    await callback.message.edit_text(f'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}?', reply_markup=prkb.admin_delete_user)
    
@router.callback_query(F.data == 'delete_user_yes')
async def delete_yes(callback: CallbackQuery, state: FSMContext):
    """
    Delete user and his stats.
    """
    data = await state.get_data()
    username = data.get('username')
    db = Database(config.DB_NAME)
    db.delete_user(username)
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=prkb.admin_delete_stats)
    
@router.callback_query(F.data == 'delete_user_stats')
async def delete_user_stats(callback: CallbackQuery, state: FSMContext):
    """
    Delete user stats.
    """
    data = await state.get_data()
    username = data.get('username')
    await callback.message.edit_text(f'–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}?', reply_markup=prkb.admin_delete_stats)
    
    
@router.callback_query(F.data == 'delete_stats_yes')
async def delete_yes(callback: CallbackQuery, state: FSMContext):
    """
    Nolification for Delete user stats.
    """
    data = await state.get_data()
    username = data.get('username')
    db = Database(config.DB_NAME)
    db.delete_user_stats(username)
    await state.clear()
    await callback.message.edit_text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username} —É–¥–∞–ª–µ–Ω–∞!')
    await callback.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞!!! \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=prkb.admin_profile)

"""========= STATS ========="""
@router.callback_query(F.data == 'stats')
async def stats(callback: CallbackQuery):
    """
    Admin stats.
    """
    db = Database(config.DB_NAME)
    total_collection_current_month = db.total_collection_current_month()
    count_work_records_current_month = db.count_work_records_current_month()    
    count_work_hours = db.count_work_hours_current_month()  
    best_user_hours_current_month = db.best_user_hours_current_month()
    best_user_collection_current_month = db.best_user_collection_current_month()
    best_user_by_collection_current_month = db.best_user_by_collection_current_month()
    current_mounth = datetime.now().strftime('%B').capitalize()
    await callback.message.edit_text(
        f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_mounth}: {total_collection_current_month}‚Ç¨\n'
        f'–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_collection_current_month}‚Ç¨\n'
        f'–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {count_work_records_current_month}\n'
        f'–í—Å–µ–≥–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã : {count_work_hours}\n\n'
        f'–ë–æ–ª—å—à–µ –≤—Å–µ—Ö —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –∑–∞ –¥–µ–Ω—å —É: @{best_user_hours_current_month[0]}\n'
        f'    –ü—Ä–æ—Ä–∞–±–æ—Ç–∞–ª(–∞): {best_user_hours_current_month[1]}\n\n'
        f'–ë–æ–ª—å—à–µ –≤—Å–µ—Ö —Å–±–æ—Ä –∑–∞ –¥–µ–Ω—å —É: @{best_user_collection_current_month[0]}\n'
        f'    –î–∞—Ç–∞ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {best_user_collection_current_month[1]}\n'
        f'    –†–∞–±–æ—Ç–∞–ª(–∞): {best_user_collection_current_month[2]}\n'
        f'    –°–±–æ—Ä: {best_user_collection_current_month[3]}‚Ç¨\n\n'
        f'–ë–æ–ª—å—à–µ –≤—Å–µ—Ö –æ–±—â–∏–π —Å–±–æ—Ä –∑–∞ –º–µ—Å—è—Ü —É: @{best_user_by_collection_current_month[0]}\n'
        f'    –°–±–æ—Ä: {best_user_by_collection_current_month[1]}‚Ç¨\n\n',
        reply_markup=prkb.pback)

@router.callback_query(F.data == 'pback')
async def back(callback: CallbackQuery, state: FSMContext):
    """
    Back to admin profile menu.
    """
    await state.clear()
    await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞!!! \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=prkb.admin_profile)